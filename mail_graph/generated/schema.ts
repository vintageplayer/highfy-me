// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountAddress(): Bytes {
    let value = this.get("accountAddress");
    return value!.toBytes();
  }

  set accountAddress(value: Bytes) {
    this.set("accountAddress", Value.fromBytes(value));
  }

  get keyCID(): string {
    let value = this.get("keyCID");
    return value!.toString();
  }

  set keyCID(value: string) {
    this.set("keyCID", Value.fromString(value));
  }

  get mailsSent(): Array<string> | null {
    let value = this.get("mailsSent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mailsSent(value: Array<string> | null) {
    if (!value) {
      this.unset("mailsSent");
    } else {
      this.set("mailsSent", Value.fromStringArray(<Array<string>>value));
    }
  }

  get inbox(): Array<string> | null {
    let value = this.get("inbox");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inbox(value: Array<string> | null) {
    if (!value) {
      this.unset("inbox");
    } else {
      this.set("inbox", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Mail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mail must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mail", id.toString(), this);
    }
  }

  static load(id: string): Mail | null {
    return changetype<Mail | null>(store.get("Mail", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get dataCID(): string {
    let value = this.get("dataCID");
    return value!.toString();
  }

  set dataCID(value: string) {
    this.set("dataCID", Value.fromString(value));
  }
}
